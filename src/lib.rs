//! Минимальная (очень неполная) реализация сервера и клиента `Redis`.
//!
//! Цель этого проекта - показать пример большого асинхронного проекта `Rust`,
//! разработанного с помощью `Tokio`. Не пытайтесь использовать его в
//! продакшне... серьезно.
//!
//! # Структура
//!
//! Структура библиотеки является максимально простой в учебных целях. Имеются
//! публичные модули, которые, вероятно, не будут публичными в реальном приложении.
//!
//! Основными компонентами являются:
//!
//! * `server` - реализация сервера `Redis`. Включает одну функцию `run`,
//! принимающую `TcpListener` и обрабатывающую подключения клиента `Redis`.
//!
//! * `clients/client` - реализация асинхронного клиента `Redis`. Показывает,
//! как разрабатывать клиенты с помощью `Tokio`.
//!
//! * `cmd` - реализации поддерживаемых команд `Redis`.
//!
//! * `frame` - представляет кадр протокола `Redis`. Кадр используется как
//! промежуточное представление между "командой" и ее байтовым представлением.

pub mod clients;
pub use clients::{BlockingClient, BufferedClient, Client};

pub mod cmd;
pub use cmd::Command;

mod connection;
pub use connection::Connection;

pub mod frame;
pub use frame::Frame;

mod db;
use db::Db;
use db::DbDropGuard;

mod parse;
use parse::{Parse, ParseError};

pub mod server;

mod shutdown;
use shutdown::Shutdown;

/// Порт по умолчанию.
pub const DEFAULT_PORT: u16 = 6379;

/// Ошибка, возвращаемая большинством функций.
///
/// В реальном приложении для обработки ошибок будет использоваться специальный
/// крейт или `enum` для разных случаев. Для нас достаточно динамического (boxed)
/// `std::error::Error`.
///
/// По причинам производительности динамическая ошибка не используется в "горячих" путях. Например, в
/// `parse()` определяется `enum` кастомных ошибок. Это связано с тем, что ошибка
/// регистрируется и обрабатывается во время нормального выполнения, когда получен частичный кадр из
/// сокета. `std::error::Error` реализован для `parse::Error`, что позволяет
/// преобразовать его в `Box<dyn std::error::Error>`.
pub type Error = Box<dyn std::error::Error + Send + Sync>;

/// Специальный тип `Result` для операций `mini-redis`.
pub type Result<T> = std::result::Result<T, Error>;
